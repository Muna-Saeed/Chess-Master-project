// Define chessboard size
const BOARD_SIZE = 8;

// Constants for piece types
const PIECE_TYPES = {
    ROOK: '&#9814;',
    KNIGHT: '&#9816;',
    BISHOP: '&#9815;',
    QUEEN: '&#9813;',
    KING: '&#9812;',
    PAWN: '&#9817;'
};

// Function to create a chess piece with color based on player
function createChessPiece(type, playerColor) {
    const piece = document.createElement('div');
    piece.classList.add('piece', type, playerColor); // Add playerColor class to the piece
    return piece;
}

// Function to initialize the chess game
function initializeChessGame() {
    createChessboard();
    // Setup pieces for both players
    setupPieces('white');
    setupPieces('black');
    // Add event listeners for handling user interactions (e.g., moving pieces)
    // Implement game logic (e.g., piece movements, capturing)
}

// Function to set up chess pieces on the board for a specific player
function setupPieces(playerColor) {
    const chessboard = document.getElementById('chessboard');

    // Place pawns
    const pawnRow = playerColor === 'white' ? 1 : 6;
    for (let col = 0; col < BOARD_SIZE; col++) {
        const pawn = createChessPiece(PIECE_TYPES.PAWN, playerColor);
        chessboard.appendChild(pawn);
    }

    // Place other pieces (rooks, knights, bishops, queen, king)
    const mainRow = playerColor === 'white' ? 0 : 7;
    const piecesOrder = [PIECE_TYPES.ROOK, PIECE_TYPES.KNIGHT, PIECE_TYPES.BISHOP, PIECE_TYPES.QUEEN, PIECE_TYPES.KING, PIECE_TYPES.BISHOP, PIECE_TYPES.KNIGHT, PIECE_TYPES.ROOK];
    for (let col = 0; col < BOARD_SIZE; col++) {
        const piece = createChessPiece(piecesOrder[col], playerColor);
        chessboard.appendChild(piece);
    }
}

// Function to create the chessboard UI
function createChessboard() {
    const chessboard = document.getElementById('chessboard');

    for (let row = 0; row < BOARD_SIZE; row++) {
        for (let col = 0; col < BOARD_SIZE; col++) {
            const square = document.createElement('div');
            square.classList.add('square');
            square.classList.add((row + col) % 2 === 0 ? 'light' : 'dark'); // Alternating colors

            // Add click event listener to each square
            square.addEventListener('click', () => handleSquareClick(square));

            chessboard.appendChild(square);
        }
    }
}

// Function to handle click on a square
function handleSquareClick(square) {
    // If a square is already selected, move the piece to the clicked square
    if (selectedSquare) {
        // Implement move logic here
        // Example: Move the piece from selectedSquare to square

        // Clear the selection
        selectedSquare.classList.remove('selected');
        selectedSquare = null;
    } else {
        // Select the clicked square
        square.classList.add('selected');
        selectedSquare = square;
    }
}

// Call initializeChessGame when the page loads
window.onload = initializeChessGame;
k
